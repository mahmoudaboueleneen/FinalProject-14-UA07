# This file is used to run the system locally, simulating the Kubernetes prod. environment.
# Can be used with the pushed images or the local images.
x-logging: &default-logging
  driver: loki
  options:
    loki-url: "http://localhost:3100/api/prom/push"
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<date>\d{4}-\d{2}-\d{2})T(?P<time>\d{2}:\d{2}:\d{2}.\d{3}) (?P<message>(?s:.*))$$'

services:
  # ============== MISCELLANEOUS MICROSERVICE ==============

  apigateway:
    # image: mahmoudaboueleneen/amazon-replica:apigateway
    build:
      context: ./apigateway
      dockerfile: Dockerfile
    container_name: apigateway
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - users-service
    environment:
      - SPRING_PROFILES_ACTIVE=local

  rabbitmq:
    image: rabbitmq:4.0-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # RabbitMQ AMQP protocol
      - "15672:15672" # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    logging: *default-logging

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisInsight
    ports:
      - "5540:5540"
    restart: always

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    restart: always

  # ============== MERCHANTS MICROSERVICE ==============

  merchants-service:
    # image: mahmoudaboueleneen/amazon-replica:merchants-service
    build:
      context: ./services/merchants
      dockerfile: Dockerfile
    container_name: merchants-service
    depends_on:
      - rabbitmq
      - merchants-db
      - merchants-cache
    ports:
      - "8081:8081"
    environment:
      - spring.data.mongodb.uri=mongodb://root:example@merchants-db:27017/merchants-db?authSource=admin
      - spring.data.mongodb.database=merchants-db
      - spring.rabbitmq.host=rabbitmq
      - spring.data.redis.host=merchants-cache
      - spring.data.redis.port=6379
      - transactions.service.url=http://transactions-service:8084/orders
      - OTEL_SERVICE_NAME=merchants-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317 # send traces to Tempo
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc # use gRPC for OTLP
      - OTEL_RESOURCE_ATTRIBUTES=compose_service=merchants-service # add custom resource attribute to Span for Grafana Trace to Logs feature
      - OTEL_METRICS_EXPORTER=none # disable metrics exporter
      - OTEL_LOGS_EXPORTER=none # disable logs exporter
      - MANAGEMENT_METRICS_TAGS_APPLICATION=merchants-service # override
    restart: always
    logging: *default-logging

  merchants-db:
    image: mongo
    container_name: merchants-db
    restart: always
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: merchants-db
    logging: *default-logging

  merchants-mongo-express:
    image: mongo-express
    container_name: merchants-mongo-express
    ports:
      - "8000:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@merchants-db:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - merchants-db
    restart: always

  merchants-cache:
    image: redis:latest
    container_name: merchants-cache
    ports:
      - "6380:6379"
    logging: *default-logging

  # ============== NOTIFICATIONS MICROSERVICE ==============

  notifications-service:
    # image: mahmoudaboueleneen/amazon-replica:notifications-service
    build:
      context: ./services/notifications
      dockerfile: Dockerfile
    container_name: notifications-service
    depends_on:
      - rabbitmq
      - notifications-db
      - notifications-cache
    ports:
      - "8082:8082"
    environment:
      - spring.data.mongodb.uri=mongodb://root:example@notifications-db:27017/notifications-db?authSource=admin
      - spring.data.mongodb.database=notifications-db
      - spring.rabbitmq.host=rabbitmq
      - spring.data.redis.host=notifications-cache
      - spring.data.redis.port=6379
      - OTEL_SERVICE_NAME=notifications-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317 # send traces to Tempo
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc # use gRPC for OTLP
      - OTEL_RESOURCE_ATTRIBUTES=compose_service=notifications-service # add custom resource attribute to Span for Grafana Trace to Logs feature
      - OTEL_METRICS_EXPORTER=none # disable metrics exporter
      - OTEL_LOGS_EXPORTER=none # disable logs exporter
      - MANAGEMENT_METRICS_TAGS_APPLICATION=notifications-service # override
      - users.service.url=http://users-service:8085/users
    restart: always
    logging: *default-logging

  notifications-db:
    image: mongo
    container_name: notifications-db
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: notifications-db
    logging: *default-logging

  notifications-mongo-express:
    image: mongo-express
    container_name: notifications-mongo-express
    ports:
      - "8001:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@notifications-db:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - notifications-db
    restart: always

  notifications-cache:
    image: redis:latest
    container_name: notifications-cache
    ports:
      - "6381:6379"
    logging: *default-logging

  # ============== SEARCH MICROSERVICE ==============

  search-service:
    # image: mahmoudaboueleneen/amazon-replica:search-service
    build:
      context: ./services/search
      dockerfile: Dockerfile
    container_name: search-service
    depends_on:
      - search-cache
    ports:
      - "8083:8083"
    environment:
      - spring.data.redis.host=search-cache
      - spring.data.redis.port=6379
      - merchants.service.url=http://merchants-service:8081
      - OTEL_SERVICE_NAME=search-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317 # send traces to Tempo
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc # use gRPC for OTLP
      - OTEL_RESOURCE_ATTRIBUTES=compose_service=search-service # add custom resource attribute to Span for Grafana Trace to Logs feature
      - OTEL_METRICS_EXPORTER=none # disable metrics exporter
      - OTEL_LOGS_EXPORTER=none # disable logs exporter
      - MANAGEMENT_METRICS_TAGS_APPLICATION=search-service # override
    restart: always
    logging: *default-logging

  search-cache:
    image: redis:latest
    container_name: search-cache
    ports:
      - "6382:6379"
    logging: *default-logging

  # ============== TRANSACTIONS MICROSERVICE ==============

  transactions-service:
    # image: mahmoudaboueleneen/amazon-replica:transactions-service
    build:
      context: ./services/transactions
      dockerfile: Dockerfile
    container_name: transactions-service
    depends_on:
      - rabbitmq
      - transactions-db
      - transactions-cache
    ports:
      - "8084:8084"
    environment:
      - spring.datasource.url=jdbc:postgresql://transactions-db:5432/transactions-db
      - spring.datasource.username=postgres
      - spring.datasource.password=postgres
      - spring.datasource.driver-class-name=org.postgresql.Driver
      - spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
      - spring.rabbitmq.host=rabbitmq
      - spring.data.redis.host=transactions-cache
      - spring.data.redis.port=6379
      - OTEL_SERVICE_NAME=transactions-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317 # send traces to Tempo
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc # use gRPC for OTLP
      - OTEL_RESOURCE_ATTRIBUTES=compose_service=transactions-service # add custom resource attribute to Span for Grafana Trace to Logs feature
      - OTEL_METRICS_EXPORTER=none # disable metrics exporter
      - OTEL_LOGS_EXPORTER=none # disable logs exporter
      - MANAGEMENT_METRICS_TAGS_APPLICATION=transactions-service # override
      - merchants.service.url=http://merchants-service:8081/products
    restart: always
    logging: *default-logging

  transactions-db:
    image: postgres
    container_name: transactions-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: transactions-db
    ports:
      - "5434:5432"
    logging: *default-logging

  transactions-cache:
    image: redis:latest
    container_name: transactions-cache
    ports:
      - "6383:6379"
    logging: *default-logging

  # ============== USERS MICROSERVICE ==============

  users-service:
    # image: mahmoudaboueleneen/amazon-replica:users-service
    build:
      context: ./services/users
      dockerfile: Dockerfile
    container_name: users-service
    depends_on:
      - users-db
    ports:
      - "8085:8085"
    environment:
      - spring.datasource.url=jdbc:postgresql://users-db:5432/users-db
      - spring.datasource.username=postgres
      - spring.datasource.password=postgres
      - spring.datasource.driver-class-name=org.postgresql.Driver
      - spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
      - OTEL_SERVICE_NAME=users-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317 # send traces to Tempo
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc # use gRPC for OTLP
      - OTEL_RESOURCE_ATTRIBUTES=compose_service=users-service # add custom resource attribute to Span for Grafana Trace to Logs feature
      - OTEL_METRICS_EXPORTER=none # disable metrics exporter
      - OTEL_LOGS_EXPORTER=none # disable logs exporter
      - MANAGEMENT_METRICS_TAGS_APPLICATION=users-service # override
    restart: always
    logging: *default-logging

  users-db:
    image: postgres
    container_name: users-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users-db
    ports:
      - "5435:5432"
    logging: *default-logging

  # ============== OBSERVABILITY ==============

  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus:/workspace
    command:
      - --config.file=/workspace/prometheus.yml
      - --enable-feature=exemplar-storage
    depends_on:
      - loki
    logging: *default-logging

  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo
    command:
      [
        "--target=all",
        "--storage.trace.backend=local",
        "--storage.trace.local.path=/var/tempo",
        "--auth.enabled=false",
      ]
    ports:
      - "14250:14250"
      - "4317:4317"
    depends_on:
      - loki
    logging: *default-logging

  grafana:
    image: grafana/grafana:10.4.2
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana/:/etc/grafana/provisioning/datasources
      - ./observability/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./observability/grafana/dashboards:/etc/grafana/dashboards
    environment:
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_ENABLE_GZIP=true
    depends_on:
      - loki
      - prometheus
    logging: *default-logging
