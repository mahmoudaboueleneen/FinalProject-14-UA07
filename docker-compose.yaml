# This file is used to run the system locally, simulating the Kubernetes prod. environment.
# Can be used with the pushed images or the local images.

services:
  # ============== MISCELLANEOUS MICROSERVICE ==============

  apigateway:
    # image: mahmoudaboueleneen/amazon-replica:apigateway
    build:
      context: ./apigateway
      dockerfile: Dockerfile
    container_name: apigateway
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - users-service
    environment:
      - SPRING_PROFILES_ACTIVE=local

  rabbitmq:
    image: rabbitmq:4.0-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # RabbitMQ AMQP protocol
      - "15672:15672" # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisInsight
    ports:
      - "5540:5540"
    restart: always

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    restart: always

  # ============== MERCHANTS MICROSERVICE ==============

  merchants-service:
    # image: mahmoudaboueleneen/amazon-replica:merchants-service
    build:
      context: ./services/merchants
      dockerfile: Dockerfile
    container_name: merchants-service
    depends_on:
      - rabbitmq
      - merchants-db
      - merchants-cache
    ports:
      - "8081:8081"
    environment:
      - spring.data.mongodb.uri=mongodb://root:example@merchants-db:27017/merchants-db?authSource=admin
      - spring.data.mongodb.database=merchants-db
      - spring.rabbitmq.host=rabbitmq
      - spring.data.redis.host=merchants-cache
      - spring.data.redis.port=6379
    restart: always

  merchants-db:
    image: mongo
    container_name: merchants-db
    restart: always
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: merchants-db

  merchants-mongo-express:
    image: mongo-express
    container_name: merchants-mongo-express
    ports:
      - "8000:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@merchants-db:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - merchants-db
    restart: always

  merchants-cache:
    image: redis:latest
    container_name: merchants-cache
    ports:
      - "6380:6379"

  # ============== NOTIFICATIONS MICROSERVICE ==============

  notifications-service:
    # image: mahmoudaboueleneen/amazon-replica:notifications-service
    build:
      context: ./services/notifications
      dockerfile: Dockerfile
    container_name: notifications-service
    depends_on:
      - rabbitmq
      - notifications-db
      - notifications-cache
    ports:
      - "8082:8082"
    environment:
      - spring.data.mongodb.uri=mongodb://root:example@notifications-db:27017/notifications-db?authSource=admin
      - spring.data.mongodb.database=notifications-db
      - spring.rabbitmq.host=rabbitmq
      - spring.data.redis.host=notifications-cache
      - spring.data.redis.port=6379
    restart: always

  notifications-db:
    image: mongo
    container_name: notifications-db
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: notifications-db

  notifications-mongo-express:
    image: mongo-express
    container_name: notifications-mongo-express
    ports:
      - "8001:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@notifications-db:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - notifications-db
    restart: always

  notifications-cache:
    image: redis:latest
    container_name: notifications-cache
    ports:
      - "6381:6379"

  # ============== SEARCH MICROSERVICE ==============

  search-service:
    # image: mahmoudaboueleneen/amazon-replica:search-service
    build:
      context: ./services/search
      dockerfile: Dockerfile
    container_name: search-service
    depends_on:
      - search-cache
    ports:
      - "8083:8083"
    environment:
      - spring.data.redis.host=search-cache
      - spring.data.redis.port=6379
    restart: always

  search-cache:
    image: redis:latest
    container_name: search-cache
    ports:
      - "6382:6379"

  # ============== TRANSACTIONS MICROSERVICE ==============

  transactions-service:
    # image: mahmoudaboueleneen/amazon-replica:transactions-service
    build:
      context: ./services/transactions
      dockerfile: Dockerfile
    container_name: transactions-service
    depends_on:
      - rabbitmq
      - transactions-db
      - transactions-cache
    ports:
    - "8084:8084"
    environment:
    - spring.datasource.url=jdbc:postgresql://transactions-db:5432/transactions-db
    - spring.datasource.username=postgres
    - spring.datasource.password=postgres
    - spring.datasource.driver-class-name=org.postgresql.Driver
    - spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
    - spring.rabbitmq.host=rabbitmq
    - spring.data.redis.host=transactions-cache
    - spring.data.redis.port=6379
    restart: always

  transactions-db:
    image: postgres
    container_name: transactions-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: transactions-db
    ports:
      - "5434:5432"

  transactions-cache:
    image: redis:latest
    container_name: transactions-cache
    ports:
      - "6383:6379"

  # ============== USERS MICROSERVICE ==============

  users-service:
    # image: mahmoudaboueleneen/amazon-replica:users-service
    build:
      context: ./services/users
      dockerfile: Dockerfile
    container_name: users-service
    depends_on:
      - users-db
    ports:
      - "8085:8085"
    environment:
      - spring.datasource.url=jdbc:postgresql://users-db:5432/users-db
      - spring.datasource.username=postgres
      - spring.datasource.password=postgres
      - spring.datasource.driver-class-name=org.postgresql.Driver
      - spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
    restart: always

  users-db:
    image: postgres
    container_name: users-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users-db
    ports:
      - "5435:5432"